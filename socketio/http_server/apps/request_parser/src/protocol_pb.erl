%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(protocol_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("protocol_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'People'() :: #'People'{}.
-type 'ChatMsg'() :: #'ChatMsg'{}.
-type 'Msg'() :: #'Msg'{}.
-type 'Base'() :: #'Base'{}.
-export_type(['People'/0, 'ChatMsg'/0, 'Msg'/0, 'Base'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'People'{} -> e_msg_People(Msg, TrUserData);
      #'ChatMsg'{} -> e_msg_ChatMsg(Msg, TrUserData);
      #'Msg'{} -> e_msg_Msg(Msg, TrUserData);
      #'Base'{} -> e_msg_Base(Msg, TrUserData)
    end.



e_msg_People(Msg, TrUserData) ->
    e_msg_People(Msg, <<>>, TrUserData).


e_msg_People(#'People'{name = F1, id = F2, email = F3},
	     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_string(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_ChatMsg(Msg, TrUserData) ->
    e_msg_ChatMsg(Msg, <<>>, TrUserData).


e_msg_ChatMsg(#'ChatMsg'{msg = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_Msg(Msg, TrUserData) ->
    e_msg_Msg(Msg, <<>>, TrUserData).


e_msg_Msg(#'Msg'{msg = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_Base(Msg, TrUserData) ->
    e_msg_Base(Msg, <<>>, TrUserData).


e_msg_Base(#'Base'{id = F1, data = F2}, Bin,
	   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 16>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 2>>)
	   end
    end.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'People' -> d_msg_People(Bin, TrUserData);
      'ChatMsg' -> d_msg_ChatMsg(Bin, TrUserData);
      'Msg' -> d_msg_Msg(Bin, TrUserData);
      'Base' -> d_msg_Base(Bin, TrUserData)
    end.



d_msg_People(Bin, TrUserData) ->
    dfp_read_field_def_People(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_People(<<10, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    d_field_People_name(Rest, Z1, Z2, F1, F2, F3,
			TrUserData);
dfp_read_field_def_People(<<16, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    d_field_People_id(Rest, Z1, Z2, F1, F2, F3, TrUserData);
dfp_read_field_def_People(<<26, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    d_field_People_email(Rest, Z1, Z2, F1, F2, F3,
			 TrUserData);
dfp_read_field_def_People(<<>>, 0, 0, F1, F2, F3, _) ->
    #'People'{name = F1, id = F2, email = F3};
dfp_read_field_def_People(Other, Z1, Z2, F1, F2, F3,
			  TrUserData) ->
    dg_read_field_def_People(Other, Z1, Z2, F1, F2, F3,
			     TrUserData).

dg_read_field_def_People(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_People(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, TrUserData);
dg_read_field_def_People(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_People_name(Rest, 0, 0, F1, F2, F3, TrUserData);
      16 ->
	  d_field_People_id(Rest, 0, 0, F1, F2, F3, TrUserData);
      26 ->
	  d_field_People_email(Rest, 0, 0, F1, F2, F3,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_People(Rest, 0, 0, F1, F2, F3, TrUserData);
	    1 -> skip_64_People(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_People(Rest, 0, 0, F1, F2, F3,
					     TrUserData);
	    5 -> skip_32_People(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_People(<<>>, 0, 0, F1, F2, F3, _) ->
    #'People'{name = F1, id = F2, email = F3}.

d_field_People_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_People_name(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, TrUserData);
d_field_People_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_People(Rest2, 0, 0, NewFValue, F2,
			      F3, TrUserData).


d_field_People_id(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, TrUserData)
    when N < 57 ->
    d_field_People_id(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, TrUserData);
d_field_People_id(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  _, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_People(Rest, 0, 0, F1, NewFValue, F3,
			      TrUserData).


d_field_People_email(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_People_email(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, TrUserData);
d_field_People_email(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_People(Rest2, 0, 0, F1, F2,
			      NewFValue, TrUserData).


skip_varint_People(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, TrUserData) ->
    skip_varint_People(Rest, Z1, Z2, F1, F2, F3,
		       TrUserData);
skip_varint_People(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, TrUserData) ->
    dfp_read_field_def_People(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData).


skip_length_delimited_People(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_People(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
skip_length_delimited_People(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_People(Rest2, 0, 0, F1, F2, F3,
			      TrUserData).


skip_32_People(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, TrUserData) ->
    dfp_read_field_def_People(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData).


skip_64_People(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, TrUserData) ->
    dfp_read_field_def_People(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData).


d_msg_ChatMsg(Bin, TrUserData) ->
    dfp_read_field_def_ChatMsg(Bin, 0, 0,
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ChatMsg(<<10, Rest/binary>>, Z1, Z2,
			   F1, TrUserData) ->
    d_field_ChatMsg_msg(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_ChatMsg(<<>>, 0, 0, F1, _) ->
    #'ChatMsg'{msg = F1};
dfp_read_field_def_ChatMsg(Other, Z1, Z2, F1,
			   TrUserData) ->
    dg_read_field_def_ChatMsg(Other, Z1, Z2, F1,
			      TrUserData).

dg_read_field_def_ChatMsg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ChatMsg(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
dg_read_field_def_ChatMsg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_ChatMsg_msg(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ChatMsg(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_ChatMsg(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ChatMsg(Rest, 0, 0, F1,
					      TrUserData);
	    5 -> skip_32_ChatMsg(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ChatMsg(<<>>, 0, 0, F1, _) ->
    #'ChatMsg'{msg = F1}.

d_field_ChatMsg_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, TrUserData)
    when N < 57 ->
    d_field_ChatMsg_msg(Rest, N + 7, X bsl N + Acc, F1,
			TrUserData);
d_field_ChatMsg_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ChatMsg(Rest2, 0, 0, NewFValue,
			       TrUserData).


skip_varint_ChatMsg(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, TrUserData) ->
    skip_varint_ChatMsg(Rest, Z1, Z2, F1, TrUserData);
skip_varint_ChatMsg(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, TrUserData) ->
    dfp_read_field_def_ChatMsg(Rest, Z1, Z2, F1,
			       TrUserData).


skip_length_delimited_ChatMsg(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ChatMsg(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ChatMsg(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ChatMsg(Rest2, 0, 0, F1, TrUserData).


skip_32_ChatMsg(<<_:32, Rest/binary>>, Z1, Z2, F1,
		TrUserData) ->
    dfp_read_field_def_ChatMsg(Rest, Z1, Z2, F1,
			       TrUserData).


skip_64_ChatMsg(<<_:64, Rest/binary>>, Z1, Z2, F1,
		TrUserData) ->
    dfp_read_field_def_ChatMsg(Rest, Z1, Z2, F1,
			       TrUserData).


d_msg_Msg(Bin, TrUserData) ->
    dfp_read_field_def_Msg(Bin, 0, 0,
			   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Msg(<<10, Rest/binary>>, Z1, Z2, F1,
		       TrUserData) ->
    d_field_Msg_msg(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Msg(<<>>, 0, 0, F1, _) ->
    #'Msg'{msg = F1};
dfp_read_field_def_Msg(Other, Z1, Z2, F1, TrUserData) ->
    dg_read_field_def_Msg(Other, Z1, Z2, F1, TrUserData).

dg_read_field_def_Msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Msg(Rest, N + 7, X bsl N + Acc, F1,
			  TrUserData);
dg_read_field_def_Msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Msg_msg(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Msg(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_Msg(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_Msg(Rest, 0, 0, F1, TrUserData);
	    5 -> skip_32_Msg(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_Msg(<<>>, 0, 0, F1, _) ->
    #'Msg'{msg = F1}.

d_field_Msg_msg(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		TrUserData)
    when N < 57 ->
    d_field_Msg_msg(Rest, N + 7, X bsl N + Acc, F1,
		    TrUserData);
d_field_Msg_msg(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Msg(Rest2, 0, 0, NewFValue,
			   TrUserData).


skip_varint_Msg(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		TrUserData) ->
    skip_varint_Msg(Rest, Z1, Z2, F1, TrUserData);
skip_varint_Msg(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F1, TrUserData).


skip_length_delimited_Msg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Msg(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
skip_length_delimited_Msg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Msg(Rest2, 0, 0, F1, TrUserData).


skip_32_Msg(<<_:32, Rest/binary>>, Z1, Z2, F1,
	    TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F1, TrUserData).


skip_64_Msg(<<_:64, Rest/binary>>, Z1, Z2, F1,
	    TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F1, TrUserData).


d_msg_Base(Bin, TrUserData) ->
    dfp_read_field_def_Base(Bin, 0, 0,
			    id(undefined, TrUserData),
			    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Base(<<16, Rest/binary>>, Z1, Z2, F1,
			F2, TrUserData) ->
    d_field_Base_id(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Base(<<2, Rest/binary>>, Z1, Z2, F1,
			F2, TrUserData) ->
    d_field_Base_data(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Base(<<>>, 0, 0, F1, F2, _) ->
    #'Base'{id = F1, data = F2};
dfp_read_field_def_Base(Other, Z1, Z2, F1, F2,
			TrUserData) ->
    dg_read_field_def_Base(Other, Z1, Z2, F1, F2,
			   TrUserData).

dg_read_field_def_Base(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Base(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
dg_read_field_def_Base(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      16 -> d_field_Base_id(Rest, 0, 0, F1, F2, TrUserData);
      2 -> d_field_Base_data(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Base(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Base(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Base(Rest, 0, 0, F1, F2,
					   TrUserData);
	    5 -> skip_32_Base(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Base(<<>>, 0, 0, F1, F2, _) ->
    #'Base'{id = F1, data = F2}.

d_field_Base_id(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		F2, TrUserData)
    when N < 57 ->
    d_field_Base_id(Rest, N + 7, X bsl N + Acc, F1, F2,
		    TrUserData);
d_field_Base_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Base(Rest, 0, 0, NewFValue, F2,
			    TrUserData).


d_field_Base_data(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, TrUserData)
    when N < 57 ->
    d_field_Base_data(Rest, N + 7, X bsl N + Acc, F1, F2,
		      TrUserData);
d_field_Base_data(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Base(Rest2, 0, 0, F1, NewFValue,
			    TrUserData).


skip_varint_Base(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, TrUserData) ->
    skip_varint_Base(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Base(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, TrUserData) ->
    dfp_read_field_def_Base(Rest, Z1, Z2, F1, F2,
			    TrUserData).


skip_length_delimited_Base(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Base(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
skip_length_delimited_Base(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Base(Rest2, 0, 0, F1, F2,
			    TrUserData).


skip_32_Base(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	     TrUserData) ->
    dfp_read_field_def_Base(Rest, Z1, Z2, F1, F2,
			    TrUserData).


skip_64_Base(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	     TrUserData) ->
    dfp_read_field_def_Base(Rest, Z1, Z2, F1, F2,
			    TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'People'{} -> merge_msg_People(Prev, New, TrUserData);
      #'ChatMsg'{} ->
	  merge_msg_ChatMsg(Prev, New, TrUserData);
      #'Msg'{} -> merge_msg_Msg(Prev, New, TrUserData);
      #'Base'{} -> merge_msg_Base(Prev, New, TrUserData)
    end.

merge_msg_People(#'People'{email = PFemail},
		 #'People'{name = NFname, id = NFid, email = NFemail},
		 _) ->
    #'People'{name = NFname, id = NFid,
	      email =
		  if NFemail =:= undefined -> PFemail;
		     true -> NFemail
		  end}.

merge_msg_ChatMsg(#'ChatMsg'{}, #'ChatMsg'{msg = NFmsg},
		  _) ->
    #'ChatMsg'{msg = NFmsg}.

merge_msg_Msg(#'Msg'{}, #'Msg'{msg = NFmsg}, _) ->
    #'Msg'{msg = NFmsg}.

merge_msg_Base(#'Base'{data = PFdata},
	       #'Base'{id = NFid, data = NFdata}, _) ->
    #'Base'{id = NFid,
	    data =
		if NFdata =:= undefined -> PFdata;
		   true -> NFdata
		end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'People'{} ->
	  v_msg_People(Msg, ['People'], TrUserData);
      #'ChatMsg'{} ->
	  v_msg_ChatMsg(Msg, ['ChatMsg'], TrUserData);
      #'Msg'{} -> v_msg_Msg(Msg, ['Msg'], TrUserData);
      #'Base'{} -> v_msg_Base(Msg, ['Base'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_People/3}).
v_msg_People(#'People'{name = F1, id = F2, email = F3},
	     Path, _) ->
    v_type_string(F1, [name | Path]),
    v_type_int32(F2, [id | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [email | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ChatMsg/3}).
v_msg_ChatMsg(#'ChatMsg'{msg = F1}, Path, _) ->
    v_type_string(F1, [msg | Path]), ok.

-dialyzer({nowarn_function,v_msg_Msg/3}).
v_msg_Msg(#'Msg'{msg = F1}, Path, _) ->
    v_type_string(F1, [msg | Path]), ok.

-dialyzer({nowarn_function,v_msg_Base/3}).
v_msg_Base(#'Base'{id = F1, data = F2}, Path, _) ->
    v_type_int32(F1, [id | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [data | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{msg, 'People'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = email, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ChatMsg'},
      [#field{name = msg, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Msg'},
      [#field{name = msg, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Base'},
      [#field{name = id, fnum = 2, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = data, fnum = 0, rnum = 3, type = bytes,
	      occurrence = optional, opts = []}]}].


get_msg_names() -> ['People', 'ChatMsg', 'Msg', 'Base'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('People') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = email, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ChatMsg') ->
    [#field{name = msg, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Msg') ->
    [#field{name = msg, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Base') ->
    [#field{name = id, fnum = 2, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = data, fnum = 0, rnum = 3, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
